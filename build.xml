<?xml version="1.0" encoding="UTF-8"?>
<project name="buildmeister.com" default="help" basedir=".">
    
    <property name="dir.public"    value="public"/>
    <property name="dir.bin"       value="bin"/>
    <property name="dir.dist"      value="dist"/>
    <property name="dir.build"     value="build"/>
    <property name="dir.doc"       value="doc"/>
    <property name="dir.db"        value="db"/>
    <property name="dir.sync"      value="sync"/>
    <property name="dir.classes"   value="${dir.public}/include"/>
    <property environment="env"/>
        
    <property file="build.properties"/>
    <property file="default.properties"/>

    <!-- define a patternset for PHP Web sources -->
    <patternset id="php.sources">
        <include name="admin/**"/>        
        <include name="articles/**"/>     
        <include name="images/**"/>     
        <include name="include/**"/>     
        <include name="javascript/**"/>     
        <include name="stylesheets/**"/>     
        <exclude name="**/.svn/**"/>    
    </patternset>
       
    <!-- create output directories -->
    <target name="init" description="create directory structure">
        <mkdir dir="${dir.dist}"/>
        <mkdir dir="${dir.build}"/>        
        <mkdir dir="${dir.doc}"/>
    </target>
    
    <!-- remove generated files -->
    <target name="clean" description="remove generated files">
        <delete dir="${dir.dist}"/>
        <delete dir="${dir.build}"/>
        <delete dir="${dir.doc}"/>
    </target>

    <!-- generate documentation -->
    <target name="phpdoc" description="generate class documentation"> 
        <phpdoc title="API Documentation" destdir="apidocs"
            sourcecode="no" output="HTML:Smarty:PHP">
            <fileset dir="${dir.classes}">
                <include name="**/*.php" />
            </fileset>
            <projdocfileset dir=".">
               <include name="**/*.php" />
            </projdocfileset>
        </phpdoc>
    </target>
    
    <!-- get a formatted release number -->
    <target name="get-relnum" description="get the release number">
        <input message="Enter release Number:" addproperty="rel.num"/>
        <!--condition property="legal-relnum">
            <matches pattern="^\d\.\d.\d(-rc\d|-alpha\d|-beta\d)*$"
                 string="${rel.num}"/>
        </condition>
        <fail message="Error: the release number is not formatted correctly"
              unless="legal-relnum"/-->
        <propertyfile file="release.properties">
                <entry key="rel.num" value="${rel.num}"/>
        </propertyfile>
    </target>
            
    <!-- prepare a release -->
    <target name="package" depends="get-relnum"
        description="package up the release">
    <zip destfile="${dir.dist}/${phing.project.name}-${rel.num}.zip">
             <fileset dir="${phing.basedir}/..">
                 <include name="**/**/*"/>
                 <exclude name="**/build.properties"/>
                 <exclude name="**/release.properties"/>
            </fileset>
        </zip>
    <checksum file="${dir.dist}/${phing.project.name}-${rel.num}.zip"/>
    </target>

    <!-- get environment -->
    <target name="get-env" depends="init"
        description="get the environment for an action">
        <input propertyname="environment">Enter environment name [dev|test|prod]</input>
    </target> 

    <!-- configure application for specific environment -->
    <target name="config" depends="get-env"
        description="configure application for a specific environment">
        <input propertyname="db.pass">Enter database password for ${environment}:</input>
        <property file="${environment}.properties"/>
	<copy overwrite="true" file="${dir.public}/stylesheets/template_main.css" 
		tofile="${dir.public}/stylesheets/main.css">
            <filterchain>
                <replacetokens begintoken="@" endtoken="@">
                  <token key="image_dir" value="${image.dir}" />
                </replacetokens>
            </filterchain>
        </copy>
	<copy overwrite="true" file="${dir.public}/include/template_constants.php" 
		tofile="${dir.public}/include/constants.php">
            <filterchain>
                <replacetokens begintoken="@" endtoken="@">
                    <token key="db_server" value="${db.server}" />
                    <token key="db_user" value="${db.user}" />
                    <token key="db_pass" value="${db.pass}" />
                    <token key="db_name" value="${db.name}" />
                    <token key="site_basedir" value="${site.basedir}" />
                	<token key="site_baseprefix" value="${site.baseprefix}" />
                </replacetokens>
            </filterchain>
        </copy>        
    </target>

    <!-- bootstrap the relevant database for dbdeploy-->  
    <target name="db.bootstrap" depends="get-env" 
        description="bootstrap database of a specific environment">     
        <input propertyname="db.pass">Enter database password for ${environment}:</input>
        <property file="${environment}.properties"/>
        
        <!-- rename if using a different database - unlikely with PHP! -->
        <property name="name.dbdeploy.bootstrapfile" 
            value="createSchemaVersionTable.mysql.sql"/>
 
        <!-- execute the SQL -->  
        <exec command="${mysqlexe} -h${db.server} -u${db.user} -p${db.pass} ${db.name} &lt; ${name.dbdeploy.bootstrapfile}"  
            dir="${dir.db}" checkreturn="true" />  
    </target> 

    <!-- update the relevant database -->  
    <target name="db.update" depends="get-env" 
        description="update database of a specific environment">     
        <input propertyname="db.pass">Enter database password for ${environment}:</input>
        <property file="${environment}.properties"/>

        <!-- load the dbdeploy task -->  
        <taskdef name="dbdeploy" classname="phing.tasks.ext.dbdeploy.DbDeployTask"/>  

        <!-- generate the deployment scripts -->  
        <dbdeploy url="mysql:host=${db.server};dbname=${db.name}"  
            userid="${db.user}" password="${db.pass}"  
            dir="${project.basedir}/${dir.db}/deltas"
            outputfile="${dir.build}/all-deltas.sql"  
            undooutputfile="${dir.build}/undo-all-deltas.sql" />  
  
        <!-- execute the SQL -->  
        <exec command="${mysqlexe} -h${db.server} -u${db.user} -p${db.pass} ${db.name} &lt; ${dir.build}\all-deltas.sql" checkreturn="true" />  
    </target> 
    
    <!-- sync the application files to the specific environment --> 
    <target name="sync" depends="config"
        description="update the application files in a specific environment">
	<exec command="${project.basedir}\${dir.bin}\FTPSync.exe ${environment} /FTPSYNCDATA:${project.basedir}\${dir.sync} /INCREMENTAL" />
    </target>

    <!-- help -->
    <target name="help" description="display help">
        <echo>build file for ${phing.project.name}</echo>
        <echo>please type ant -p for description of all targets</echo>
    </target>

</project>
